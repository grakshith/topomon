{"pageProps":{"examples":[{"name":"animations","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport circularLayout from \"graphology-layout/circular\";\nimport { scaleLinear } from \"d3-scale\";\nimport { extent } from \"simple-statistics\";\n\nimport Sigma from \"sigma\";\nimport { animateNodes } from \"sigma/utils/animate\";\n\nimport miserables from \"./resources/les-miserables.json\";\nimport { globalize } from \"./utils\";\n\nconst graph = new UndirectedGraph();\n\n// Prepare data:\nconst nodeSizeExtent = extent(miserables.nodes.map((n) => n.size));\nconst xExtent = extent(miserables.nodes.map((n) => n.x));\nconst yExtent = extent(miserables.nodes.map((n) => n.y));\n\nconst nodeSizeScale = scaleLinear().domain(nodeSizeExtent).range([3, 15]);\nconst xScale = scaleLinear().domain(xExtent).range([0, 1]);\nconst yScale = scaleLinear().domain(yExtent).range([0, 1]);\n\nmiserables.nodes.forEach((node: { x: number; y: number; size: number }) => {\n  node.size = nodeSizeScale(node.size) as number;\n  node.x = xScale(node.x) as number;\n  node.y = yScale(node.y) as number;\n});\n\nmiserables.nodes.forEach((node, i) => {\n  graph.addNode(i, node);\n});\n\nmiserables.edges.forEach((edge) => {\n  graph.addEdge(+edge.source, +edge.target, { color: \"#ccc\" });\n});\n\nconst container = document.getElementById(\"container\");\n\nconst renderer = new Sigma(graph, container);\n\nconst initial: Record<string, { x: number; y: number }> = {};\n\nmiserables.nodes.forEach((node: { size: number; x: number; y: number }, i) => {\n  initial[i] = {\n    x: node.x,\n    y: node.y,\n  };\n});\n\nconst circle = circularLayout(graph);\n\nlet state = false;\n\nfunction loop() {\n  const l = state ? initial : circle;\n\n  animateNodes(graph, l, { duration: 2000 }, () => {\n    state = !state;\n    loop();\n  });\n}\n\nloop();\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> circularLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/circular&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { scaleLinear } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;d3-scale&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { extent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;simple-statistics&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { animateNodes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma/utils/animate&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> miserables <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./resources/les-miserables.json&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> UndirectedGraph();\n\n<span class=\"hljs-comment\">// Prepare data:</span>\n<span class=\"hljs-keyword\">const</span> nodeSizeExtent = extent(miserables.nodes.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n.size));\n<span class=\"hljs-keyword\">const</span> xExtent = extent(miserables.nodes.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n.x));\n<span class=\"hljs-keyword\">const</span> yExtent = extent(miserables.nodes.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n.y));\n\n<span class=\"hljs-keyword\">const</span> nodeSizeScale = scaleLinear().domain(nodeSizeExtent).range([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>]);\n<span class=\"hljs-keyword\">const</span> xScale = scaleLinear().domain(xExtent).range([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]);\n<span class=\"hljs-keyword\">const</span> yScale = scaleLinear().domain(yExtent).range([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]);\n\nmiserables.nodes.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node: { x: <span class=\"hljs-built_in\">number</span>; y: <span class=\"hljs-built_in\">number</span>; size: <span class=\"hljs-built_in\">number</span> }</span>) =&gt;</span> {\n  node.size = nodeSizeScale(node.size) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>;\n  node.x = xScale(node.x) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>;\n  node.y = yScale(node.y) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>;\n});\n\nmiserables.nodes.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node, i</span>) =&gt;</span> {\n  graph.addNode(i, node);\n});\n\nmiserables.edges.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">edge</span>) =&gt;</span> {\n  graph.addEdge(+edge.source, +edge.target, { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;#ccc&quot;</span> });\n});\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\n<span class=\"hljs-keyword\">const</span> initial: Record&lt;<span class=\"hljs-built_in\">string</span>, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>; y: <span class=\"hljs-built_in\">number</span> }&gt; = {};\n\nmiserables.nodes.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node: { size: <span class=\"hljs-built_in\">number</span>; x: <span class=\"hljs-built_in\">number</span>; y: <span class=\"hljs-built_in\">number</span> }, i</span>) =&gt;</span> {\n  initial[i] = {\n    <span class=\"hljs-attr\">x</span>: node.x,\n    <span class=\"hljs-attr\">y</span>: node.y,\n  };\n});\n\n<span class=\"hljs-keyword\">const</span> circle = circularLayout(graph);\n\n<span class=\"hljs-keyword\">let</span> state = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loop</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> l = state ? initial : circle;\n\n  animateNodes(graph, l, { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">2000</span> }, <span class=\"hljs-function\">() =&gt;</span> {\n    state = !state;\n    loop();\n  });\n}\n\nloop();\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/animations.ts","htmlPath":"/home/alexis/code/sigma/examples/animations.ts","iframePath":"/demos/animations.html"},{"name":"basic","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport erdosRenyi from \"graphology-generators/random/erdos-renyi\";\nimport randomLayout from \"graphology-layout/random\";\nimport chroma from \"chroma-js\";\n\nimport Sigma from \"sigma\";\n\nimport { getRandomName, globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = erdosRenyi(UndirectedGraph, { order: 100, probability: 0.2 });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: chroma.random().hex(),\n  });\n});\n\nconst renderer = new Sigma(graph, container);\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> erdosRenyi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/erdos-renyi&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> graph = erdosRenyi(UndirectedGraph, { <span class=\"hljs-attr\">order</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">probability</span>: <span class=\"hljs-number\">0.2</span> });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    <span class=\"hljs-attr\">label</span>: getRandomName(),\n    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n  });\n});\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/basic.ts","htmlPath":"/home/alexis/code/sigma/examples/basic.ts","iframePath":"/demos/basic.html"},{"name":"components","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport randomLayout from \"graphology-layout/random\";\nimport forceAtlas2 from \"graphology-layout-forceatlas2\";\nimport louvain from \"graphology-communities-louvain\";\nimport { connectedComponents } from \"graphology-components\";\n\nimport Sigma from \"sigma\";\n\nimport data from \"./resources/toflit.json\";\n\nconst scale = (d: number) => Math.max(2, Math.log2(d) * 1.7);\n\ndocument.body.innerHTML += `\n  <style>\n    .subcontainer {\n      position: absolute;\n      height: 300px;\n      border-right: 1px solid black;\n      border-bottom: 1px solid black;\n    }\n    .subcontainer:nth-child(1),\n    .subcontainer:nth-child(2),\n    .subcontainer:nth-child(3) {\n      border-top: 1px solid black;\n    }\n  </style>\n`;\n\nconst mainContainer = document.getElementById(\"container\") as HTMLElement;\n\nconst graph = new UndirectedGraph();\n\ndata.forEach(({ source, target }) => {\n  graph.mergeEdge(source, target);\n});\n\ngraph.nodes().forEach((node) => {\n  graph.setNodeAttribute(node, \"label\", node);\n  graph.setNodeAttribute(node, \"size\", scale(graph.degree(node)));\n});\n\nconst components = connectedComponents(graph);\n\ncomponents.forEach((component) => {\n  if (component.length < 10) component.forEach((node) => graph.dropNode(node));\n});\n\nconst map: { [key: string]: number } = louvain(graph);\nconst communities: { [key: string]: UndirectedGraph } = {};\n\nfor (const node in map) {\n  const c = map[node];\n\n  if (!(c in communities)) communities[c] = new UndirectedGraph();\n\n  const h = communities[c];\n\n  h.mergeNode(node, graph.getNodeAttributes(node));\n\n  graph.edges(node).forEach((edge) => {\n    const target = graph.opposite(node, edge);\n\n    if (node < target || map[target] !== c) return;\n\n    h.mergeEdge(node, target);\n  });\n}\n\nconst biggerCommunities: Array<UndirectedGraph> = Object.values(communities)\n  .sort((a, b) => b.order - a.order)\n  .slice(0, 6);\n\nconst width = mainContainer.offsetWidth;\n\nconst cellWidth = (width / 3) | 0;\n\nconst containers = biggerCommunities.map((_, i) => {\n  const container = document.createElement(\"div\");\n  container.style.width = `${cellWidth}px`;\n  container.style.left = `${(i % 3) * cellWidth}px`;\n  container.style.top = `${Math.floor(i / 3) * 300}px`;\n  container.className = \"subcontainer\";\n  mainContainer.appendChild(container);\n  return container;\n});\n\nbiggerCommunities.forEach((h, i) => {\n  randomLayout.assign(h);\n  forceAtlas2.assign(h, {\n    iterations: 100,\n    settings: forceAtlas2.inferSettings(h),\n  });\n\n  const container = containers[i];\n\n  new Sigma(h, container);\n});\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> forceAtlas2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout-forceatlas2&quot;</span>;\n<span class=\"hljs-keyword\">import</span> louvain <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-communities-louvain&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { connectedComponents } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-components&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> data <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./resources/toflit.json&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-function\">(<span class=\"hljs-params\">d: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">Math</span>.log2(d) * <span class=\"hljs-number\">1.7</span>);\n\n<span class=\"hljs-built_in\">document</span>.body.innerHTML += <span class=\"hljs-string\">`\n  &lt;style&gt;\n    .subcontainer {\n      position: absolute;\n      height: 300px;\n      border-right: 1px solid black;\n      border-bottom: 1px solid black;\n    }\n    .subcontainer:nth-child(1),\n    .subcontainer:nth-child(2),\n    .subcontainer:nth-child(3) {\n      border-top: 1px solid black;\n    }\n  &lt;/style&gt;\n`</span>;\n\n<span class=\"hljs-keyword\">const</span> mainContainer = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>) <span class=\"hljs-keyword\">as</span> HTMLElement;\n\n<span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> UndirectedGraph();\n\ndata.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ source, target }</span>) =&gt;</span> {\n  graph.mergeEdge(source, target);\n});\n\ngraph.nodes().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.setNodeAttribute(node, <span class=\"hljs-string\">&quot;label&quot;</span>, node);\n  graph.setNodeAttribute(node, <span class=\"hljs-string\">&quot;size&quot;</span>, scale(graph.degree(node)));\n});\n\n<span class=\"hljs-keyword\">const</span> components = connectedComponents(graph);\n\ncomponents.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">component</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (component.length &lt; <span class=\"hljs-number\">10</span>) component.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> graph.dropNode(node));\n});\n\n<span class=\"hljs-keyword\">const</span> map: { [key: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">number</span> } = louvain(graph);\n<span class=\"hljs-keyword\">const</span> communities: { [key: <span class=\"hljs-built_in\">string</span>]: UndirectedGraph } = {};\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">in</span> map) {\n  <span class=\"hljs-keyword\">const</span> c = map[node];\n\n  <span class=\"hljs-keyword\">if</span> (!(c <span class=\"hljs-keyword\">in</span> communities)) communities[c] = <span class=\"hljs-keyword\">new</span> UndirectedGraph();\n\n  <span class=\"hljs-keyword\">const</span> h = communities[c];\n\n  h.mergeNode(node, graph.getNodeAttributes(node));\n\n  graph.edges(node).forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">edge</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> target = graph.opposite(node, edge);\n\n    <span class=\"hljs-keyword\">if</span> (node &lt; target || map[target] !== c) <span class=\"hljs-keyword\">return</span>;\n\n    h.mergeEdge(node, target);\n  });\n}\n\n<span class=\"hljs-keyword\">const</span> biggerCommunities: <span class=\"hljs-built_in\">Array</span>&lt;UndirectedGraph&gt; = <span class=\"hljs-built_in\">Object</span>.values(communities)\n  .sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> b.order - a.order)\n  .slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>);\n\n<span class=\"hljs-keyword\">const</span> width = mainContainer.offsetWidth;\n\n<span class=\"hljs-keyword\">const</span> cellWidth = (width / <span class=\"hljs-number\">3</span>) | <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">const</span> containers = biggerCommunities.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&quot;div&quot;</span>);\n  container.style.width = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${cellWidth}</span>px`</span>;\n  container.style.left = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${(i % <span class=\"hljs-number\">3</span>) * cellWidth}</span>px`</span>;\n  container.style.top = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.floor(i / <span class=\"hljs-number\">3</span>) * <span class=\"hljs-number\">300</span>}</span>px`</span>;\n  container.className = <span class=\"hljs-string\">&quot;subcontainer&quot;</span>;\n  mainContainer.appendChild(container);\n  <span class=\"hljs-keyword\">return</span> container;\n});\n\nbiggerCommunities.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">h, i</span>) =&gt;</span> {\n  randomLayout.assign(h);\n  forceAtlas2.assign(h, {\n    <span class=\"hljs-attr\">iterations</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-attr\">settings</span>: forceAtlas2.inferSettings(h),\n  });\n\n  <span class=\"hljs-keyword\">const</span> container = containers[i];\n\n  <span class=\"hljs-keyword\">new</span> Sigma(h, container);\n});\n","codePath":"/home/alexis/code/sigma/examples/components.ts","htmlPath":"/home/alexis/code/sigma/examples/components.ts","iframePath":"/demos/components.html"},{"name":"drag","codeRaw":"import Graph from \"graphology\";\nimport gexf from \"graphology-gexf/browser\";\nimport { NodeKey } from \"graphology-types\";\n\nimport Sigma from \"sigma\";\n\nimport { globalize } from \"./utils\";\nimport arctic from \"./resources/arctic.gexf\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = gexf.parse(Graph, arctic);\n\ngraph.edges().forEach((edge) => {\n  graph.setEdgeAttribute(edge, \"color\", \"#ccc\");\n});\n\nconst renderer = new Sigma(graph, container);\n\nconst camera = renderer.getCamera();\n\nconst captor = renderer.getMouseCaptor();\n\n// State\nlet draggedNode: NodeKey | null = null,\n  dragging = false;\n\nrenderer.on(\"downNode\", (e) => {\n  dragging = true;\n  draggedNode = e.node;\n  camera.disable();\n});\n\ncaptor.on(\"mouseup\", () => {\n  dragging = false;\n  draggedNode = null;\n  camera.enable();\n});\n\ncaptor.on(\"mousemove\", (e) => {\n  if (!dragging || !draggedNode) return;\n\n  // Get new position of node\n  const pos = renderer.viewportToGraph(e);\n\n  graph.setNodeAttribute(draggedNode, \"x\", pos.x);\n  graph.setNodeAttribute(draggedNode, \"y\", pos.y);\n});\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> Graph <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> gexf <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-gexf/browser&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { NodeKey } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-types&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n<span class=\"hljs-keyword\">import</span> arctic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./resources/arctic.gexf&quot;</span>;\n\nconst container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\nconst graph = gexf.parse(Graph, arctic);\n\ngraph.edges().forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">(edge)</span> =&gt;</span> {\n  graph.setEdgeAttribute(edge, <span class=\"hljs-string\">&quot;color&quot;</span>, <span class=\"hljs-string\">&quot;#ccc&quot;</span>);\n});\n\nconst renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\nconst camera = renderer.getCamera();\n\nconst captor = renderer.getMouseCaptor();\n\n<span class=\"hljs-regexp\">//</span> State\nlet draggedNode: NodeKey | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>,\n  dragging = <span class=\"hljs-literal\">false</span>;\n\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;downNode&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(e)</span> =&gt;</span> {\n  dragging = <span class=\"hljs-literal\">true</span>;\n  draggedNode = e.node;\n  camera.disable();\n});\n\ncaptor.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;mouseup&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  dragging = <span class=\"hljs-literal\">false</span>;\n  draggedNode = <span class=\"hljs-literal\">null</span>;\n  camera.enable();\n});\n\ncaptor.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;mousemove&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(e)</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (!dragging || !draggedNode) <span class=\"hljs-keyword\">return</span>;\n\n  <span class=\"hljs-regexp\">//</span> Get <span class=\"hljs-keyword\">new</span> position <span class=\"hljs-keyword\">of</span> node\n  const pos = renderer.viewportToGraph(e);\n\n  graph.setNodeAttribute(draggedNode, <span class=\"hljs-string\">&quot;x&quot;</span>, pos.x);\n  graph.setNodeAttribute(draggedNode, <span class=\"hljs-string\">&quot;y&quot;</span>, pos.y);\n});\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/drag.ts","htmlPath":"/home/alexis/code/sigma/examples/drag.ts","iframePath":"/demos/drag.html"},{"name":"dynamic","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport erdosRenyi from \"graphology-generators/random/erdos-renyi\";\nimport randomLayout from \"graphology-layout/random\";\nimport FA2Layout from \"graphology-layout-forceatlas2/worker\";\nimport choice from \"pandemonium/choice\";\nimport random from \"pandemonium/random\";\nimport chroma from \"chroma-js\";\n\nimport Sigma from \"sigma\";\n\nimport { getRandomName, globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = erdosRenyi(UndirectedGraph, { order: 100, probability: 0.2 });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: chroma.random().hex(),\n  });\n});\n\nconst renderer = new Sigma(graph, container);\n\n// Randomly editing the graph every second\nconst OPERATIONS = [\"addNode\"];\nlet counter = 0;\n\nfunction edit() {\n  const op = choice(OPERATIONS);\n\n  // Adding node\n  if (op === \"addNode\") {\n    const nodeKey = \"added-\" + counter++;\n\n    const otherNodes = graph.nodes();\n\n    graph.addNode(nodeKey, {\n      label: getRandomName(),\n      size: Math.max(4, Math.random() * 10) * 2,\n      color: chroma.random().hex(),\n      x: Math.random(),\n      y: Math.random(),\n    });\n\n    // Adding edges\n    const targets = new Set(\n      Array.from(new Array(random(1, 5)), () => {\n        return choice(otherNodes);\n      }),\n    );\n\n    targets.forEach((target) => {\n      graph.addEdge(nodeKey, target, { color: chroma.random().hex() });\n    });\n  }\n}\n\nsetInterval(edit, 1000);\n\n// Layout experiences\nconst layout = new FA2Layout(graph, { settings: { slowDown: 1000000 } });\n\nglobalize({\n  graph,\n  renderer,\n  startLayout: function () {\n    layout.start();\n  },\n  stopLayout: function () {\n    layout.stop();\n  },\n});\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> erdosRenyi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/erdos-renyi&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> FA2Layout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout-forceatlas2/worker&quot;</span>;\n<span class=\"hljs-keyword\">import</span> choice <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;pandemonium/choice&quot;</span>;\n<span class=\"hljs-keyword\">import</span> random <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;pandemonium/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> graph = erdosRenyi(UndirectedGraph, { <span class=\"hljs-attr\">order</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">probability</span>: <span class=\"hljs-number\">0.2</span> });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    <span class=\"hljs-attr\">label</span>: getRandomName(),\n    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n  });\n});\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\n<span class=\"hljs-comment\">// Randomly editing the graph every second</span>\n<span class=\"hljs-keyword\">const</span> OPERATIONS = [<span class=\"hljs-string\">&quot;addNode&quot;</span>];\n<span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> op = choice(OPERATIONS);\n\n  <span class=\"hljs-comment\">// Adding node</span>\n  <span class=\"hljs-keyword\">if</span> (op === <span class=\"hljs-string\">&quot;addNode&quot;</span>) {\n    <span class=\"hljs-keyword\">const</span> nodeKey = <span class=\"hljs-string\">&quot;added-&quot;</span> + counter++;\n\n    <span class=\"hljs-keyword\">const</span> otherNodes = graph.nodes();\n\n    graph.addNode(nodeKey, {\n      <span class=\"hljs-attr\">label</span>: getRandomName(),\n      <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>) * <span class=\"hljs-number\">2</span>,\n      <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n      <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">Math</span>.random(),\n      <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">Math</span>.random(),\n    });\n\n    <span class=\"hljs-comment\">// Adding edges</span>\n    <span class=\"hljs-keyword\">const</span> targets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(\n      <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(random(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)), <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> choice(otherNodes);\n      }),\n    );\n\n    targets.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">target</span>) =&gt;</span> {\n      graph.addEdge(nodeKey, target, { <span class=\"hljs-attr\">color</span>: chroma.random().hex() });\n    });\n  }\n}\n\n<span class=\"hljs-built_in\">setInterval</span>(edit, <span class=\"hljs-number\">1000</span>);\n\n<span class=\"hljs-comment\">// Layout experiences</span>\n<span class=\"hljs-keyword\">const</span> layout = <span class=\"hljs-keyword\">new</span> FA2Layout(graph, { <span class=\"hljs-attr\">settings</span>: { <span class=\"hljs-attr\">slowDown</span>: <span class=\"hljs-number\">1000000</span> } });\n\nglobalize({\n  graph,\n  renderer,\n  <span class=\"hljs-attr\">startLayout</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    layout.start();\n  },\n  <span class=\"hljs-attr\">stopLayout</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    layout.stop();\n  },\n});\n","codePath":"/home/alexis/code/sigma/examples/dynamic.ts","htmlPath":"/home/alexis/code/sigma/examples/dynamic.ts","iframePath":"/demos/dynamic.html"},{"name":"events","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport erdosRenyi from \"graphology-generators/random/erdos-renyi\";\nimport randomLayout from \"graphology-layout/random\";\nimport chroma from \"chroma-js\";\nimport { EdgeKey, NodeKey } from \"graphology-types\";\n\nimport Sigma from \"sigma\";\nimport { EdgeAttributes, NodeAttributes } from \"sigma/types\";\n\nimport { getRandomName, globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = erdosRenyi.sparse(UndirectedGraph, {\n  order: 500,\n  probability: 0.05,\n});\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: chroma.random().hex(),\n    zIndex: 0,\n  });\n});\n\ngraph.edges().forEach((edge) =>\n  graph.mergeEdgeAttributes(edge, {\n    color: \"#ccc\",\n    zIndex: 0,\n  }),\n);\n\nlet highlighedNodes = new Set();\nlet highlighedEdges = new Set();\n\nconst nodeReducer = (node: NodeKey, data: NodeAttributes) => {\n  if (highlighedNodes.has(node)) return { ...data, color: \"#f00\", zIndex: 1 };\n\n  return data;\n};\n\nconst edgeReducer = (edge: EdgeKey, data: EdgeAttributes) => {\n  if (highlighedEdges.has(edge)) return { ...data, color: \"#f00\", zIndex: 1 };\n\n  return data;\n};\n\nconst renderer = new Sigma(graph, container, {\n  nodeReducer,\n  edgeReducer,\n  zIndex: true,\n});\n\nrenderer.on(\"clickNode\", ({ node, captor, event }) => {\n  console.log(\"Clicking:\", node, captor, event);\n});\nrenderer.on(\"rightClickNode\", ({ node, captor, event }) => {\n  console.log(\"Right Clicking:\", node, captor, event);\n  event.preventDefault();\n});\n\nrenderer.on(\"downStage\", ({ event }) => {\n  console.log(\"Downing the stage.\", event);\n});\nrenderer.on(\"clickStage\", ({ event }) => {\n  console.log(\"Clicking the stage.\", event);\n});\nrenderer.on(\"rightClickStage\", ({ event }) => {\n  console.log(\"Right Clicking the stage.\", event);\n});\n\nrenderer.on(\"enterNode\", ({ node }) => {\n  console.log(\"Entering: \", node);\n  highlighedNodes = new Set(graph.neighbors(node));\n  highlighedNodes.add(node);\n\n  highlighedEdges = new Set(graph.edges(node));\n\n  renderer.refresh();\n});\n\nrenderer.on(\"leaveNode\", ({ node }) => {\n  console.log(\"Leaving:\", node);\n\n  highlighedNodes.clear();\n  highlighedEdges.clear();\n\n  renderer.refresh();\n});\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> erdosRenyi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/erdos-renyi&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { EdgeKey, NodeKey } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-types&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { EdgeAttributes, NodeAttributes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma/types&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\nconst container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\nconst graph = erdosRenyi.sparse(UndirectedGraph, {\n  order: <span class=\"hljs-number\">500</span>,\n  probability: <span class=\"hljs-number\">0.05</span>,\n});\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">(node)</span> =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    color: chroma.random().hex(),\n    zIndex: <span class=\"hljs-number\">0</span>,\n  });\n});\n\ngraph.edges().forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">(edge)</span> =&gt;</span>\n  graph.mergeEdgeAttributes(edge, {\n    color: <span class=\"hljs-string\">&quot;#ccc&quot;</span>,\n    zIndex: <span class=\"hljs-number\">0</span>,\n  }),\n);\n\nlet highlighedNodes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\nlet highlighedEdges = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n\nconst nodeReducer = <span class=\"hljs-function\"><span class=\"hljs-params\">(node: NodeKey, data: NodeAttributes)</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (highlighedNodes.has(node)) <span class=\"hljs-keyword\">return</span> { ...data, color: <span class=\"hljs-string\">&quot;#f00&quot;</span>, zIndex: <span class=\"hljs-number\">1</span> };\n\n  <span class=\"hljs-keyword\">return</span> data;\n};\n\nconst edgeReducer = <span class=\"hljs-function\"><span class=\"hljs-params\">(edge: EdgeKey, data: EdgeAttributes)</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (highlighedEdges.has(edge)) <span class=\"hljs-keyword\">return</span> { ...data, color: <span class=\"hljs-string\">&quot;#f00&quot;</span>, zIndex: <span class=\"hljs-number\">1</span> };\n\n  <span class=\"hljs-keyword\">return</span> data;\n};\n\nconst renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container, {\n  nodeReducer,\n  edgeReducer,\n  zIndex: <span class=\"hljs-literal\">true</span>,\n});\n\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;clickNode&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ node, captor, event })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Clicking:&quot;</span>, node, captor, event);\n});\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;rightClickNode&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ node, captor, event })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Right Clicking:&quot;</span>, node, captor, event);\n  event.preventDefault();\n});\n\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;downStage&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ event })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Downing the stage.&quot;</span>, event);\n});\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;clickStage&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ event })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Clicking the stage.&quot;</span>, event);\n});\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;rightClickStage&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ event })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Right Clicking the stage.&quot;</span>, event);\n});\n\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;enterNode&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ node })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Entering: &quot;</span>, node);\n  highlighedNodes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(graph.neighbors(node));\n  highlighedNodes.add(node);\n\n  highlighedEdges = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(graph.edges(node));\n\n  renderer.refresh();\n});\n\nrenderer.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;leaveNode&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({ node })</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Leaving:&quot;</span>, node);\n\n  highlighedNodes.clear();\n  highlighedEdges.clear();\n\n  renderer.refresh();\n});\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/events.ts","htmlPath":"/home/alexis/code/sigma/examples/events.ts","iframePath":"/demos/events.html"},{"name":"gexf","codeRaw":"import Graph from \"graphology\";\nimport gexf from \"graphology-gexf/browser\";\n\nimport Sigma from \"sigma\";\n\nimport { globalize } from \"./utils\";\n\nimport arctic from \"./resources/arctic.gexf\";\n\nconst graph = gexf.parse(Graph, arctic);\n\nconst container = document.getElementById(\"container\");\n\nconst renderer = new Sigma(graph, container);\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> Graph <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> gexf <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-gexf/browser&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> arctic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./resources/arctic.gexf&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> graph = gexf.parse(Graph, arctic);\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/gexf.ts","htmlPath":"/home/alexis/code/sigma/examples/gexf.ts","iframePath":"/demos/gexf.html"},{"name":"layout","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport clusters from \"graphology-generators/random/clusters\";\nimport randomLayout from \"graphology-layout/random\";\nimport FA2Layout from \"graphology-layout-forceatlas2/worker\";\n\nimport Sigma from \"sigma\";\n\nimport { getRandomName, globalize } from \"./utils\";\n\nconst PALETTE = [\"#b4943e\", \"#777acd\", \"#60a862\", \"#c45ca2\", \"#cb5a4c\"];\n\nconst container = document.getElementById(\"container\");\n\nconsole.time(\"Creation\");\nconst graph = clusters(UndirectedGraph, {\n  order: 5000,\n  size: 25000,\n  clusters: 5,\n});\nconsole.timeEnd(\"Creation\");\n\nrandomLayout.assign(graph, { scale: 400, center: 0 });\n\nconsole.time(\"Node Attributes\");\ngraph.nodes().forEach((node) => {\n  const attr = graph.getNodeAttributes(node);\n\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: PALETTE[attr.cluster],\n  });\n});\nconsole.timeEnd(\"Node Attributes\");\n\nconsole.time(\"Edge Attributes\");\ngraph.edges().forEach((edge) => {\n  graph.setEdgeAttribute(edge, \"color\", \"#ccc\");\n});\nconsole.timeEnd(\"Edge Attributes\");\n\nconst renderer = new Sigma(graph, container);\n\nconst layout = new FA2Layout(graph, { settings: { barnesHutOptimize: true } });\nlayout.start();\n\nglobalize({ graph, renderer, layout });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> clusters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/clusters&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> FA2Layout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout-forceatlas2/worker&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> PALETTE = [<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#b4943e</span>&quot;</span>, <span class=\"hljs-string\">&quot;#777acd&quot;</span>, <span class=\"hljs-string\">&quot;#60a862&quot;</span>, <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#c45ca2</span>&quot;</span>, <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#cb5a4c</span>&quot;</span>];\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&quot;Creation&quot;</span>);\n<span class=\"hljs-keyword\">const</span> graph = clusters(UndirectedGraph, {\n  order: <span class=\"hljs-number\">5000</span>,\n  size: <span class=\"hljs-number\">25000</span>,\n  clusters: <span class=\"hljs-number\">5</span>,\n});\n<span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&quot;Creation&quot;</span>);\n\nrandomLayout.assign(graph, { scale: <span class=\"hljs-number\">400</span>, center: <span class=\"hljs-number\">0</span> });\n\n<span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&quot;Node Attributes&quot;</span>);\ngraph.nodes().forEach((node) =&gt; {\n  <span class=\"hljs-keyword\">const</span> attr = graph.getNodeAttributes(node);\n\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    color: PALETTE[attr.cluster],\n  });\n});\n<span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&quot;Node Attributes&quot;</span>);\n\n<span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&quot;Edge Attributes&quot;</span>);\ngraph.edges().forEach((edge) =&gt; {\n  graph.setEdgeAttribute(edge, <span class=\"hljs-string\">&quot;color&quot;</span>, <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#ccc</span>&quot;</span>);\n});\n<span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&quot;Edge Attributes&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\n<span class=\"hljs-keyword\">const</span> layout = <span class=\"hljs-keyword\">new</span> FA2Layout(graph, { settings: { barnesHutOptimize: <span class=\"hljs-literal\">true</span> } });\nlayout.start();\n\nglobalize({ graph, renderer, layout });\n","codePath":"/home/alexis/code/sigma/examples/layout.ts","htmlPath":"/home/alexis/code/sigma/examples/layout.ts","iframePath":"/demos/layout.html"},{"name":"noverlap","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport randomLayout from \"graphology-layout/random\";\nimport empty from \"graphology-generators/classic/empty\";\nimport noverlap, { NoverlapNodeReducer } from \"graphology-layout-noverlap\";\nimport NoverlapLayoutSupervisor from \"graphology-layout-noverlap/worker\";\nimport chroma from \"chroma-js\";\nimport random from \"pandemonium/random\";\n\nimport Sigma from \"sigma\";\nimport { animateNodes } from \"sigma/utils/animate\";\n\nimport { globalize } from \"./utils\";\n\nconst NOVERLAP_SETTINGS = {\n  margin: 2,\n  ratio: 1,\n  speed: 3,\n};\n\nconst container = document.getElementById(\"container\") as HTMLDivElement;\n\nconst graph = empty(UndirectedGraph, 1000);\nrandomLayout.assign(graph);\n\ngraph.forEachNode((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: node,\n    size: random(2, 10),\n    color: chroma.random().hex(),\n  });\n});\n\nconst renderer = new Sigma(graph, container);\n\nfunction createButton(text: string, offset: number) {\n  const button = document.createElement(\"button\");\n  button.textContent = text;\n  button.style.position = \"absolute\";\n  button.style.left = \"10px\";\n\n  let top = 10;\n\n  top += offset * 40;\n\n  button.style.top = `${top}px`;\n\n  container.appendChild(button);\n\n  return button;\n}\n\nconst inputReducer: NoverlapNodeReducer = (key, attr) => {\n  return { ...attr, ...renderer.graphToViewport(attr) };\n};\n\nconst outputReducer: NoverlapNodeReducer = (key, attr) => {\n  return { ...attr, ...renderer.viewportToGraph(attr) };\n};\n\nconst fixedButton = createButton(\"noverlap 500\", 0);\n\nfixedButton.onclick = () => {\n  console.time(\"noverlap\");\n  const layout = noverlap(graph, { inputReducer, outputReducer, maxIterations: 500, settings: NOVERLAP_SETTINGS });\n  console.timeEnd(\"noverlap\");\n\n  animateNodes(graph, layout, { duration: 100, easing: \"linear\" }, () => console.log(\"done\"));\n};\n\nconst supervisor = new NoverlapLayoutSupervisor(graph, { inputReducer, outputReducer, settings: NOVERLAP_SETTINGS });\n\nconst startButton = createButton(\"start\", 1);\nconst stopButton = createButton(\"stop\", 2);\n\nstartButton.onclick = () => {\n  supervisor.start();\n};\n\nstopButton.onclick = () => {\n  supervisor.stop();\n};\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> empty <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/classic/empty&quot;</span>;\n<span class=\"hljs-keyword\">import</span> noverlap, { NoverlapNodeReducer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout-noverlap&quot;</span>;\n<span class=\"hljs-keyword\">import</span> NoverlapLayoutSupervisor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout-noverlap/worker&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n<span class=\"hljs-keyword\">import</span> random <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;pandemonium/random&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { animateNodes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma/utils/animate&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> NOVERLAP_SETTINGS = {\n  <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">ratio</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">3</span>,\n};\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>) <span class=\"hljs-keyword\">as</span> HTMLDivElement;\n\n<span class=\"hljs-keyword\">const</span> graph = empty(UndirectedGraph, <span class=\"hljs-number\">1000</span>);\nrandomLayout.assign(graph);\n\ngraph.forEachNode(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    <span class=\"hljs-attr\">label</span>: node,\n    <span class=\"hljs-attr\">size</span>: random(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>),\n    <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n  });\n});\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createButton</span>(<span class=\"hljs-params\">text: <span class=\"hljs-built_in\">string</span>, offset: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&quot;button&quot;</span>);\n  button.textContent = text;\n  button.style.position = <span class=\"hljs-string\">&quot;absolute&quot;</span>;\n  button.style.left = <span class=\"hljs-string\">&quot;10px&quot;</span>;\n\n  <span class=\"hljs-keyword\">let</span> top = <span class=\"hljs-number\">10</span>;\n\n  top += offset * <span class=\"hljs-number\">40</span>;\n\n  button.style.top = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${top}</span>px`</span>;\n\n  container.appendChild(button);\n\n  <span class=\"hljs-keyword\">return</span> button;\n}\n\n<span class=\"hljs-keyword\">const</span> inputReducer: NoverlapNodeReducer = <span class=\"hljs-function\">(<span class=\"hljs-params\">key, attr</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> { ...attr, ...renderer.graphToViewport(attr) };\n};\n\n<span class=\"hljs-keyword\">const</span> outputReducer: NoverlapNodeReducer = <span class=\"hljs-function\">(<span class=\"hljs-params\">key, attr</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> { ...attr, ...renderer.viewportToGraph(attr) };\n};\n\n<span class=\"hljs-keyword\">const</span> fixedButton = createButton(<span class=\"hljs-string\">&quot;noverlap 500&quot;</span>, <span class=\"hljs-number\">0</span>);\n\nfixedButton.onclick = <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&quot;noverlap&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> layout = noverlap(graph, { inputReducer, outputReducer, <span class=\"hljs-attr\">maxIterations</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-attr\">settings</span>: NOVERLAP_SETTINGS });\n  <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&quot;noverlap&quot;</span>);\n\n  animateNodes(graph, layout, { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">easing</span>: <span class=\"hljs-string\">&quot;linear&quot;</span> }, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;done&quot;</span>));\n};\n\n<span class=\"hljs-keyword\">const</span> supervisor = <span class=\"hljs-keyword\">new</span> NoverlapLayoutSupervisor(graph, { inputReducer, outputReducer, <span class=\"hljs-attr\">settings</span>: NOVERLAP_SETTINGS });\n\n<span class=\"hljs-keyword\">const</span> startButton = createButton(<span class=\"hljs-string\">&quot;start&quot;</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">const</span> stopButton = createButton(<span class=\"hljs-string\">&quot;stop&quot;</span>, <span class=\"hljs-number\">2</span>);\n\nstartButton.onclick = <span class=\"hljs-function\">() =&gt;</span> {\n  supervisor.start();\n};\n\nstopButton.onclick = <span class=\"hljs-function\">() =&gt;</span> {\n  supervisor.stop();\n};\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/noverlap.ts","htmlPath":"/home/alexis/code/sigma/examples/noverlap.ts","iframePath":"/demos/noverlap.html"},{"name":"pan-to-node","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport erdosRenyi from \"graphology-generators/random/erdos-renyi\";\nimport randomLayout from \"graphology-layout/random\";\nimport chroma from \"chroma-js\";\nimport { NodeKey } from \"graphology-types\";\n\nimport Sigma from \"sigma\";\n\nimport { getRandomName, globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = erdosRenyi(UndirectedGraph, { order: 100, probability: 0.2 });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: chroma.random().hex(),\n  });\n});\n\n// Get a random node key :\nconst centerKey: NodeKey = graph.nodes()[Math.ceil(Math.random() * 100)];\n\nconst renderer = new Sigma(graph, container, {\n  nodeReducer: (nodeKey: NodeKey, data) => (nodeKey === centerKey ? { ...data, highlighted: true } : data),\n});\n\n// Calling the camera to pan to node\nrenderer.getCamera().animate(renderer.getNodeAttributes(centerKey) as { x: number; y: number }, {\n  easing: \"linear\",\n  duration: 500,\n});\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> erdosRenyi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/erdos-renyi&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { NodeKey } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-types&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> graph = erdosRenyi(UndirectedGraph, { <span class=\"hljs-attr\">order</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">probability</span>: <span class=\"hljs-number\">0.2</span> });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    <span class=\"hljs-attr\">label</span>: getRandomName(),\n    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n  });\n});\n\n<span class=\"hljs-comment\">// Get a random node key :</span>\n<span class=\"hljs-keyword\">const</span> centerKey: NodeKey = graph.nodes()[<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">100</span>)];\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container, {\n  <span class=\"hljs-attr\">nodeReducer</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">nodeKey: NodeKey, data</span>) =&gt;</span> (nodeKey === centerKey ? { ...data, <span class=\"hljs-attr\">highlighted</span>: <span class=\"hljs-literal\">true</span> } : data),\n});\n\n<span class=\"hljs-comment\">// Calling the camera to pan to node</span>\nrenderer.getCamera().animate(renderer.getNodeAttributes(centerKey) <span class=\"hljs-keyword\">as</span> { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>; y: <span class=\"hljs-built_in\">number</span> }, {\n  <span class=\"hljs-attr\">easing</span>: <span class=\"hljs-string\">&quot;linear&quot;</span>,\n  <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">500</span>,\n});\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/pan-to-node.ts","htmlPath":"/home/alexis/code/sigma/examples/pan-to-node.ts","iframePath":"/demos/pan-to-node.html"},{"name":"performance","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport erdosRenyi from \"graphology-generators/random/erdos-renyi\";\nimport randomLayout from \"graphology-layout/random\";\nimport chroma from \"chroma-js\";\n\nimport Sigma from \"sigma\";\n\nimport { getRandomName, globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = erdosRenyi.sparse(UndirectedGraph, {\n  order: 1000 * 1000,\n  probability: 0,\n});\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: chroma.random().hex(),\n  });\n});\n\ngraph.edges().forEach((edge) => {\n  graph.setEdgeAttribute(edge, \"color\", \"#ccc\");\n});\n\nconst renderer = new Sigma(graph, container, {\n  renderLabels: false,\n});\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> erdosRenyi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/erdos-renyi&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> graph = erdosRenyi.sparse(UndirectedGraph, {\n  <span class=\"hljs-attr\">order</span>: <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">1000</span>,\n  <span class=\"hljs-attr\">probability</span>: <span class=\"hljs-number\">0</span>,\n});\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    <span class=\"hljs-attr\">label</span>: getRandomName(),\n    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n  });\n});\n\ngraph.edges().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">edge</span>) =&gt;</span> {\n  graph.setEdgeAttribute(edge, <span class=\"hljs-string\">&quot;color&quot;</span>, <span class=\"hljs-string\">&quot;#ccc&quot;</span>);\n});\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container, {\n  <span class=\"hljs-attr\">renderLabels</span>: <span class=\"hljs-literal\">false</span>,\n});\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/performance.ts","htmlPath":"/home/alexis/code/sigma/examples/performance.ts","iframePath":"/demos/performance.html"},{"name":"settings","codeRaw":"import Graph from \"graphology\";\nimport gexf from \"graphology-gexf/browser\";\n\nimport Sigma from \"sigma\";\n\nimport { globalize } from \"./utils\";\n\nimport arctic from \"./resources/arctic.gexf\";\n\nconst graph = gexf.parse(Graph, arctic);\n\ngraph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"size\", 2));\n\nconst container = document.getElementById(\"container\");\n\nconst settings = {\n  defaultEdgeType: \"arrow\",\n  labelSize: 20,\n  labelGrid: {\n    cell: {\n      width: 250,\n      height: 50,\n    },\n    renderedSizeThreshold: 8,\n  },\n};\n\nconst renderer = new Sigma(graph, container, settings);\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> Graph <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> gexf <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-gexf/browser&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> arctic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./resources/arctic.gexf&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> graph = gexf.parse(Graph, arctic);\n\ngraph.forEachEdge(<span class=\"hljs-function\">(<span class=\"hljs-params\">edge</span>) =&gt;</span> graph.setEdgeAttribute(edge, <span class=\"hljs-string\">&quot;size&quot;</span>, <span class=\"hljs-number\">2</span>));\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> settings = {\n  <span class=\"hljs-attr\">defaultEdgeType</span>: <span class=\"hljs-string\">&quot;arrow&quot;</span>,\n  <span class=\"hljs-attr\">labelSize</span>: <span class=\"hljs-number\">20</span>,\n  <span class=\"hljs-attr\">labelGrid</span>: {\n    <span class=\"hljs-attr\">cell</span>: {\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">250</span>,\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">50</span>,\n    },\n    <span class=\"hljs-attr\">renderedSizeThreshold</span>: <span class=\"hljs-number\">8</span>,\n  },\n};\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container, settings);\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/settings.ts","htmlPath":"/home/alexis/code/sigma/examples/settings.ts","iframePath":"/demos/settings.html"},{"name":"tiny","codeRaw":"import { UndirectedGraph } from \"graphology\";\n\nimport Sigma from \"sigma\";\n\nimport { globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = new UndirectedGraph();\n\ngraph.addNode(\"Jessica\", {\n  label: \"Jessica\",\n  x: 1,\n  y: 1,\n  color: \"#FF0\",\n  size: 10,\n});\n\ngraph.addNode(\"Truman\", {\n  label: \"Truman\",\n  x: 0,\n  y: 0,\n  color: \"#00F\",\n  size: 5,\n});\n\ngraph.addEdge(\"Jessica\", \"Truman\", {\n  color: \"#CCC\",\n  size: 1,\n});\n\nconst renderer = new Sigma(graph, container);\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-class\">import </span>{ UndirectedGraph } from <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n\nimport Sigma from <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-class\">import </span>{ globalize } from <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\nconst container = document.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\nconst graph = new UndirectedGraph();\n\ngraph.addNode(<span class=\"hljs-string\">&quot;Jessica&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;Jessica&quot;</span>,\n<span class=\"hljs-symbol\">  x:</span> <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-symbol\">  y:</span> <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#FF0&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">10</span>,\n});\n\ngraph.addNode(<span class=\"hljs-string\">&quot;Truman&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;Truman&quot;</span>,\n<span class=\"hljs-symbol\">  x:</span> <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-symbol\">  y:</span> <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#00F&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">5</span>,\n});\n\ngraph.addEdge(<span class=\"hljs-string\">&quot;Jessica&quot;</span>, <span class=\"hljs-string\">&quot;Truman&quot;</span>, {\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#CCC&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">1</span>,\n});\n\nconst renderer = new Sigma(graph, container);\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/tiny.ts","htmlPath":"/home/alexis/code/sigma/examples/tiny.ts","iframePath":"/demos/tiny.html"},{"name":"edge-labels","codeRaw":"import { DirectedGraph } from \"graphology\";\n\nimport Sigma from \"sigma\";\n\nimport { globalize } from \"./utils\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = new DirectedGraph();\n\ngraph.addNode(\"Alice\", {\n  label: \"Alice\",\n  x: -2,\n  y: 1,\n  color: \"#FF0\",\n  size: 10,\n});\n\ngraph.addNode(\"Bob\", {\n  label: \"Bob\",\n  x: 1,\n  y: 2,\n  color: \"#00F\",\n  size: 5,\n});\n\ngraph.addNode(\"Charles\", {\n  label: \"Charles\",\n  x: 2,\n  y: -1,\n  color: \"#00F\",\n  size: 5,\n});\n\ngraph.addNode(\"Deborah\", {\n  label: \"Deborah\",\n  x: -1,\n  y: -2,\n  color: \"#00F\",\n  size: 5,\n});\n\ngraph.addEdge(\"Alice\", \"Bob\", {\n  label: \"likes to play with\",\n  size: 1,\n});\n\ngraph.addEdge(\"Bob\", \"Charles\", {\n  label: \"likes to be with\",\n  color: \"#fc0\",\n  size: 2,\n});\n\ngraph.addEdge(\"Charles\", \"Deborah\", {\n  label: \"likes to talk with\",\n  color: \"#CCC\",\n  size: 3,\n});\n\ngraph.addEdge(\"Deborah\", \"Alice\", {\n  label: \"likes to talk with\",\n  color: \"#000\",\n  size: 20,\n});\n\nconst renderer = new Sigma(graph, container, {\n  defaultEdgeType: \"arrow\",\n  defaultEdgeColor: \"#888\",\n  renderEdgeLabels: true,\n});\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-class\">import </span>{ DirectedGraph } from <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n\nimport Sigma from <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-class\">import </span>{ globalize } from <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\nconst container = document.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\nconst graph = new DirectedGraph();\n\ngraph.addNode(<span class=\"hljs-string\">&quot;Alice&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;Alice&quot;</span>,\n<span class=\"hljs-symbol\">  x:</span> <span class=\"hljs-number\">-2</span>,\n<span class=\"hljs-symbol\">  y:</span> <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#FF0&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">10</span>,\n});\n\ngraph.addNode(<span class=\"hljs-string\">&quot;Bob&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;Bob&quot;</span>,\n<span class=\"hljs-symbol\">  x:</span> <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-symbol\">  y:</span> <span class=\"hljs-number\">2</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#00F&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">5</span>,\n});\n\ngraph.addNode(<span class=\"hljs-string\">&quot;Charles&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;Charles&quot;</span>,\n<span class=\"hljs-symbol\">  x:</span> <span class=\"hljs-number\">2</span>,\n<span class=\"hljs-symbol\">  y:</span> <span class=\"hljs-number\">-1</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#00F&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">5</span>,\n});\n\ngraph.addNode(<span class=\"hljs-string\">&quot;Deborah&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;Deborah&quot;</span>,\n<span class=\"hljs-symbol\">  x:</span> <span class=\"hljs-number\">-1</span>,\n<span class=\"hljs-symbol\">  y:</span> <span class=\"hljs-number\">-2</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#00F&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">5</span>,\n});\n\ngraph.addEdge(<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;likes to play with&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">1</span>,\n});\n\ngraph.addEdge(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Charles&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;likes to be with&quot;</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#fc0&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">2</span>,\n});\n\ngraph.addEdge(<span class=\"hljs-string\">&quot;Charles&quot;</span>, <span class=\"hljs-string\">&quot;Deborah&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;likes to talk with&quot;</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#CCC&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">3</span>,\n});\n\ngraph.addEdge(<span class=\"hljs-string\">&quot;Deborah&quot;</span>, <span class=\"hljs-string\">&quot;Alice&quot;</span>, {\n<span class=\"hljs-symbol\">  label:</span> <span class=\"hljs-string\">&quot;likes to talk with&quot;</span>,\n<span class=\"hljs-symbol\">  color:</span> <span class=\"hljs-string\">&quot;#000&quot;</span>,\n<span class=\"hljs-symbol\">  size:</span> <span class=\"hljs-number\">20</span>,\n});\n\nconst renderer = new Sigma(graph, container, {\n<span class=\"hljs-symbol\">  defaultEdgeType:</span> <span class=\"hljs-string\">&quot;arrow&quot;</span>,\n<span class=\"hljs-symbol\">  defaultEdgeColor:</span> <span class=\"hljs-string\">&quot;#888&quot;</span>,\n<span class=\"hljs-symbol\">  renderEdgeLabels:</span> true,\n});\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/edge-labels.ts","htmlPath":"/home/alexis/code/sigma/examples/edge-labels.ts","iframePath":"/demos/edge-labels.html"},{"name":"custom-nodes","codeRaw":"import { UndirectedGraph } from \"graphology\";\nimport erdosRenyi from \"graphology-generators/random/erdos-renyi\";\nimport randomLayout from \"graphology-layout/random\";\nimport chroma from \"chroma-js\";\n\nimport Sigma from \"sigma\";\n\nimport { getRandomName, globalize } from \"./utils\";\nimport CustomNodeProgram from \"./custom-nodes/custom-node-program\";\n\nconst container = document.getElementById(\"container\");\n\nconst graph = erdosRenyi(UndirectedGraph, { order: 100, probability: 0.2 });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach((node) => {\n  graph.mergeNodeAttributes(node, {\n    label: getRandomName(),\n    size: Math.max(4, Math.random() * 10),\n    color: chroma.random().hex(),\n  });\n});\n\nconst renderer = new Sigma(graph, container, {\n  nodeProgramClasses: { circle: CustomNodeProgram },\n});\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n<span class=\"hljs-keyword\">import</span> erdosRenyi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-generators/random/erdos-renyi&quot;</span>;\n<span class=\"hljs-keyword\">import</span> randomLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology-layout/random&quot;</span>;\n<span class=\"hljs-keyword\">import</span> chroma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chroma-js&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { getRandomName, globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n<span class=\"hljs-keyword\">import</span> CustomNodeProgram <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./custom-nodes/custom-node-program&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> graph = erdosRenyi(UndirectedGraph, { <span class=\"hljs-attr\">order</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">probability</span>: <span class=\"hljs-number\">0.2</span> });\nrandomLayout.assign(graph);\n\ngraph.nodes().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node</span>) =&gt;</span> {\n  graph.mergeNodeAttributes(node, {\n    <span class=\"hljs-attr\">label</span>: getRandomName(),\n    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>),\n    <span class=\"hljs-attr\">color</span>: chroma.random().hex(),\n  });\n});\n\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container, {\n  <span class=\"hljs-attr\">nodeProgramClasses</span>: { <span class=\"hljs-attr\">circle</span>: CustomNodeProgram },\n});\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/custom-nodes.ts","htmlPath":"/home/alexis/code/sigma/examples/custom-nodes.ts","iframePath":"/demos/custom-nodes.html"},{"name":"rotation","codeRaw":"import { UndirectedGraph } from \"graphology\";\n\nimport Sigma from \"sigma\";\nimport { requestFrame } from \"sigma/utils\";\n\nimport { globalize } from \"./utils\";\n\nimport miserables from \"./resources/les-miserables.json\";\n\nconst graph = new UndirectedGraph();\n\n// Read graph data:\nmiserables.nodes.forEach((node, i) => {\n  graph.addNode(i, node);\n});\nmiserables.edges.forEach((edge) => {\n  graph.addEdge(+edge.source, +edge.target, { color: \"#ccc\" });\n});\n\n// Instantiate sigma:\nconst container = document.getElementById(\"container\");\nconst renderer = new Sigma(graph, container);\n\n// Setup constant rotation:\nfunction rotate() {\n  const camera = renderer.getCamera();\n  camera.setState({\n    ...camera.getState(),\n    angle: camera.getState().angle + 0.01,\n  });\n  requestFrame(rotate);\n}\nrotate();\n\nglobalize({ graph, renderer });\n","codeHTML":"<span class=\"hljs-keyword\">import</span> { UndirectedGraph } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;graphology&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Sigma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { requestFrame } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;sigma/utils&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { globalize } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./utils&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> miserables <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./resources/les-miserables.json&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> UndirectedGraph();\n\n<span class=\"hljs-comment\">// Read graph data:</span>\nmiserables.nodes.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node, i</span>) =&gt;</span> {\n  graph.addNode(i, node);\n});\nmiserables.edges.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">edge</span>) =&gt;</span> {\n  graph.addEdge(+edge.source, +edge.target, { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;#ccc&quot;</span> });\n});\n\n<span class=\"hljs-comment\">// Instantiate sigma:</span>\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;container&quot;</span>);\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Sigma(graph, container);\n\n<span class=\"hljs-comment\">// Setup constant rotation:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rotate</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> camera = renderer.getCamera();\n  camera.setState({\n    ...camera.getState(),\n    <span class=\"hljs-attr\">angle</span>: camera.getState().angle + <span class=\"hljs-number\">0.01</span>,\n  });\n  requestFrame(rotate);\n}\nrotate();\n\nglobalize({ graph, renderer });\n","codePath":"/home/alexis/code/sigma/examples/rotation.ts","htmlPath":"/home/alexis/code/sigma/examples/rotation.ts","iframePath":"/demos/rotation.html"}]},"__N_SSG":true}